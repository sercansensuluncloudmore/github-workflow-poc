# This is a basic workflow that is manually triggered

name: Auto Test Run

# Controls when the action will run. Workflow runs when manually triggered using the UI
# or API.
on:
  workflow_dispatch:
    # Inputs the workflow accepts.
    inputs:
      environment:
        type: choice
        description: Choose one env name - dev | staging | prod | qa | hotfix
        required: true
        default: dev 
        options:
          - dev
          - staging
          - qa
          - hotfix
          - prod
      app_version:
        description: 'Please do not enter manually! Version of the application under test.'
        required: false
        type: string
        default: ""
      backwards_compatibility:
        description: Backwards compatibility. Deploy previous App release with new liquibase patches
        default: "false"  

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  findApplicationVersion:
    name: Find version of application.
    runs-on: ubuntu-latest
    outputs: 
      app_version: ${{steps.found_version.outputs.version}}
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
      - uses: sercansensuluncloudmore/github-workflow-custom-action-poc@main
        id: app_version
      - uses: jannekem/run-python-script-action@v1.2
        id: found_version
        with:
          script: |
            version = '${{ github.event.inputs.app_version }}'
            is_backward_compatibility = "${{github.event.inputs.backwards_compatibility}}"
            if (is_backward_compatibility):
              print('It is backward compatibility.')
              version = "0.0.0"
            else:
              print('It is NOT compatibility. Parse application version.')
              print(f"split ${{steps.app_version.outputs.version}}")
              version = "${{steps.app_version.outputs.version}}".split('release-')[1]
            set_output('version', version)
  # This workflow contains a single job called "greet"
  runtests:
    needs: [findApplicationVersion] 
    name: Run Tests for ${{needs.findApplicationVersion.outputs.app_version}} version
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    # Runs a single command using the runners shell
    - name: Run Tests
      run: |
        echo "Environment is ${{ github.event.inputs.environment }} || App Version is ${{needs.findApplicationVersion.outputs.app_version}}"
